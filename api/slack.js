import { WebClient } from "@slack/web-api";
import { Client as NotionClient } from "@notionhq/client";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Slack –∏ Notion SDK
const slack = new WebClient(process.env.SLACK_BOT_TOKEN);
const notion = new NotionClient({ auth: process.env.NOTION_TOKEN });
const databaseId = "1e52f2293f318011ad90f250c778279b";

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Notion
async function addToNotion({ user, summary }) {
  try {
    console.log("üì• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Notion:", user, summary);

    await notion.pages.create({
      parent: { database_id: databaseId },
      properties: {
        Name: {
          title: [{ text: { content: user } }],
        },
        Date: {
          date: { start: new Date().toISOString().split("T")[0] },
        },
        Win: {
          rich_text: [{ text: { content: summary.win || "-" } }],
        },
        Blocker: {
          rich_text: [{ text: { content: summary.blocker || "-" } }],
        },
        Shoutout: {
          rich_text: [{ text: { content: summary.shoutout || "-" } }],
        },
        Focus: {
          rich_text: [{ text: { content: summary.focus || "-" } }],
        },
      },
    });

    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Notion!");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Notion:", err.message);
  }
}

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).send("Method Not Allowed");
  }

  const { type, challenge, command, user_id, event } = req.body;

  // Slack URL verification
  if (type === "url_verification") {
    res.setHeader("Content-Type", "text/plain");
    return res.status(200).send(challenge);
  }

  // Slash-–∫–æ–º–∞–Ω–¥–∞ /checkin
  if (command === "/checkin") {
    await slack.chat.postMessage({
      channel: user_id,
      text: "üëã It‚Äôs check-in time! Answer below üëá",
      blocks: [
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: "*üß† Score yourself (1‚Äì5):*\n- Autonomy\n- Clarity\n- Output\n- Speed\n- Collaboration",
          },
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: "*üéØ Biggest win or blocker this month?*",
          },
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: "*üôå Who helped you this month?*",
          },
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: "*üìà Focus for next month?*",
          },
        },
      ],
    });

    return res.status(200).send();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (
    type === "event_callback" &&
    event &&
    event.type === "message" &&
    event.channel_type === "im"
  ) {
    const user = event.user;
    const text = event.text;

    console.log("üí¨ –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", text);

    // –ü–æ–∫–∞ –≤—Å—ë –ø–∏—à–µ–º –≤ Win ‚Äî –ø–æ–∑–∂–µ –±—É–¥–µ—Ç AI summary
    const summary = {
      win: text,
      blocker: "-",
      shoutout: "-",
      focus: "-",
    };

    await addToNotion({ user: `<@${user}>`, summary });

    return res.status(200).send();
  }

  return res.status(200).send("OK");
}
